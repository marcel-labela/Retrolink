// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @unique @default(uuid())
  email             String?         @unique
  username          String?         @unique
  password          String
  refreshTokens     RefreshToken[]
  Adverts           Advert[]
  gameCollection    Collection?
  conversations     Conversation[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?       @updatedAt
  isAdmin           Boolean         @default(false)
}

model RefreshToken {
  id            String    @id @unique @default(uuid())
  hashedToken   String
  userId        String
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Advert {
  id                    String              @id @unique @default(uuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  userId                String
  title                 String
  description           String
  price                 Decimal
  User                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  status                AdvertStatusEnum    @default(FORSALE)
  preferenceOfSending   SendingPrefEnum
  condition             ConditionOfProductEnum
  console               ConsoleEnum
  productType           ProductTypeEnum
}

model Collection {
  id                    String              @id @unique @default(uuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  userId                String @unique
  User                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  games                 Game[]
}

model Game {
  id                    String              @id @unique @default(uuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  Collection            Collection          @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId          String
  name                  String
  console               ConsoleEnum
  genre                 String
  review                String?
}

model Conversation {
  id                    String              @id @unique @default(uuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  messages              Message[]
  recipientId           String
  recipientName         User                @relation(fields: [recipientId], references: [id], onDelete: Cascade)
}

model Message {
  id                    String              @id @unique @default(uuid())
  createdAt             DateTime            @default(now())
  conversation          Conversation        @relation(fields: [conversationId], references: [id])
  conversationId        String
}

model IssueRequest {
  id                    String              @id @unique @default(uuid())
  createdAt             DateTime            @default(now())
  updatedAt             DateTime?           @updatedAt
  userId                String
  message               String
}

enum ProductTypeEnum {
  CONSOLE
  GAME
  ACCESSORY
  OTHER
}

enum ConditionOfProductEnum {
  NEW
  GOODASNEW
  USED
}

enum AdvertStatusEnum {
  SOLD
  FORSALE
  RESERVED
}

enum SendingPrefEnum {
  PICKUP
  SEND
  PICKUPANDSEND
}

enum ConsoleEnum {
  WII
  SWITCH
  GAMEBOY
  DS
  DS2D
  DS3D
  PSCLASSIC
  PS2
  PS3
  PS4
  PS5
  NES
  SNES
  GC
  N64
  XBOXCLASSIC
  XBOX360
  XBOXONE
  PSP
  SEGA
  DREAMCAST
  OTHER
}